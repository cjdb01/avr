/***************************************************************************************
   Example.3.2: This example demonstrates on how TIMER0 OVERFLOW interrupt can be used
                to switch the speaker and motor on and off for approximately one second
            The STACK POINTER is needed to keep track of the return address
                **********************************************************************
                connections:
            PB0-PB3     -> LED0 - LED3
            PB4         -> Mot    
            Ain(Audio)  -> OpD
            ASD         -> Speaker (PIN 1)
            PB0(Switch) -> OpE   
/**************************************************************************************/

; GOOD Commands on AVR Studio: Ctrl+F10 (Run to cursor)

.include "m64def.inc"

.def temp=r16
.def counter=r17
.def counter2=r18
.def counter3=r19
.def ledval=r20
.def counter4=r21
.def counter5=r22
.def ZERO=r23
.def input=r24
.def input_counter=r10
.def buffer_size=r11

;setting up the interrupt vector
jmp RESET
jmp EXT_INT0 ; IRQ0 Handler
jmp EXT_INT1 ; IRQ1 Handler
jmp Default ; IRQ2 Handler
jmp Default ; IRQ3 Handler
jmp Default ; IRQ4 Handler
jmp Default ; IRQ5 Handler
jmp Default ; IRQ6 Handler
jmp Default ; IRQ7 Handler
jmp Default ; Timer2 Compare Handler
jmp Default ; Timer2 Overflow Handler
jmp Default ; Timer1 Capture Handler
jmp Default ; Timer1 CompareA Handler
jmp Default ; Timer1 CompareB Handler
jmp Default ; Timer1 Overflow Handler
jmp Default ; Timer0 Compare Handler
jmp Timer0  ; Timer0 Overflow Handler

Default: reti

RESET: ldi temp, high(RAMEND) ; Initialize stack pointer
out SPH, temp
ldi temp, low(RAMEND)
out SPL, temp
ldi counter,0            
ldi counter2,0
ldi counter3,0
ldi counter4,0
ldi counter5,0
ldi ZERO,0
ldi temp,255
out DDRB,temp ; set all to input
ldi ledval,170; set the LEDval to 10101010
out PORTB,ZERO ; clear the LED
rjmp main

Timer0:                  ; Prologue starts.
push r29                 ; Save all conflict registers in the prologue.
push r28
in r24, SREG
push r24                 ; Prologue ends.

/**** a counter for 3597 is needed to get one second-- Three counters are used in this example **************/                                          
                         ; 3597  (1 interrupt 278microseconds therefore 3597 interrupts needed for 1 sec)
cpi counter, 97          ; counting for 97
;cpi counter, 2          ; made to test
brne notsecond
 
cpi counter2, 35         ; counting for 35
;cpi counter2, 2         ; make to test
brne secondloop          ; jumping into count 100

cpi counter4,3             ; keeps doing it three times.
breq finish_blink               ; if it is zero jump to set it to FF
ldi counter,0    ; clearing the counter values after counting 3597 interrupts which gives us one second
ldi counter2,0
ldi counter3,0
cpi counter5,2             ; displays ledval for two seconds then goes off for one second
breq ledoff
inc counter5
out PORTB,ledval
rjmp exit

ledoff: out PORTB,ZERO ; sending 0 to port
        ldi counter5,0
        inc counter4
        rjmp exit        ; go to exit

notsecond: inc counter   ; if it is not a second, increment the counter
           rjmp exit

secondloop: inc counter3 ; counting 100 for every 35 times := 35*100 := 3500
            cpi counter3,100 
            brne exit
        inc counter2
        ldi counter3,0
        rjmp exit                  

finish_blink:
        ldi counter4,0
        ldi counter5,0
        rjmp exit
exit: 
pop r24                  ; Epilogue starts;
out SREG, r24            ; Restore all conflict registers from the stack.
pop r28
pop r29
reti                     ; Return from the interrupt.



;;;;;;;;;;;;;;;;;;;;;;; MYLES READ THIS BIT PLEASE!!
;;;;;;;;;;;;;;;;;;;;;;; Ok so I (Chris) have written my stuff below main
;;;;;;;;;;;;;;;;;;;;;;; I'm not sure where to put it because I don't have
;;;;;;;;;;;;;;;;;;;;;;; the board, but an rjmp to my section will suffice
;;;;;;;;;;;;;;;;;;;;;;; this rjmp should be in main, and needs to be
;;;;;;;;;;;;;;;;;;;;;;; labelled `retmain', as I rjmp back to `retmain'.
;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;; I think you will also need to insert `mov input 0xFF'
;;;;;;;;;;;;;;;;;;;;;;; directly after Andrew's part is completed.

main:
ldi temp, 0b00000010     ; 
out TCCR0, temp          ; Prescaling value=8  ;256*8/7.3728( Frequency of the clock 7.3728MHz, for the overflow it should go for 256 times)
ldi temp, 1<<TOIE0       ; =278 microseconds
out TIMSK, temp          ; T/C0 interrupt enable
sei                      ; Enable global interrupt
loop: rjmp loop          ; loop forever


EXT_INT0: 
push r29                 ; Save all conflict registers in the prologue.
push r28
in r25, SREG
push r25                 ; Prologue ends.

inc nxtCounter           ; Add 1 bit to the right location of 4bits
ldi temp, 1
mul temp, nxtCounter
add nxtChar, temp

cpi nxtCounter, 4
brne exit


resetInput: ;put in the value queue <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  
            ldi nxtCounter, 0
            ldi nxtChar, 0
            ldd temp, queueSize   ;states there is an input in the stack
            inc temp
            ldd queueSize, temp
            rjmp exit

accept_input:
   inc input_counter
   cpi input_counter, 4
   brne buffer_max
   rjmp main

buffer_max:
   push input
   inc buffer_size
   ldi input_counter, 0
   rjmp resetInput
   rjmp main

EXT_INT0:
   lsl input
   rjmp accept_input

EXT_INT1:
   lsl input
   add input, 1
   rjmp accept_input



display_input:
    add buffer_size, Y
    mov r0, Y
    mov Y, buffer_size
    out PORTC, Y
    mov buffer_size, Y
    mov Y, r0
    dec buffer_size
